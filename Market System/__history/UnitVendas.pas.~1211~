unit UnitVendas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Data.DB,
  Vcl.Grids, Vcl.DBGrids, UnitConexao, Vcl.DBCtrls, Vcl.Buttons,System.StrUtils;

type
  TFormVendas = class(TForm)
    PanelTopCadastros: TPanel;
    PanelBotaoClientes: TPanel;
    LabelClientes: TLabel;
    PanelBotaoFechar: TPanel;
    PanelCenterVendas: TPanel;
    Panel1: TPanel;
    Cliente: TLabel;
    PanelBotaoFinalizarVenda: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    EditValorTotal: TEdit;
    EditQuantidade: TEdit;
    Label3: TLabel;
    Label4: TLabel;
    EditDescontoTotal: TEdit;
    PanelInserirItemVenda: TPanel;
    PanelExcluitItem: TPanel;
    EditNomeClienteVenda: TEdit;
    ButtonBuscaCliente: TButton;
    EditCodCliente: TEdit;
    PanelMetodoDeDesconto: TPanel;
    RbPorcentagem: TRadioButton;
    RbValorReal: TRadioButton;
    PanelBotaoCancelarVenda: TPanel;
    PanelBotaoVerificarEstoque: TPanel;
    DBGridItemVenda: TDBGrid;
    EditCodProduto: TEdit;
    EditNomeProduto: TEdit;
    ButtonBuscaProduto: TButton;
    LabelCodigo: TLabel;
    EditCodigoVenda: TEdit;
    PanelNovaVenda: TPanel;
    PanelAtualizarValorTotal: TPanel;
    procedure PanelBotaoFecharClick(Sender: TObject);
    procedure PanelBotaoFecharMouseEnter(Sender: TObject);
    procedure PanelBotaoFecharMouseLeave(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure PanelInserirItemVendaClick(Sender: TObject);



    procedure ButtonBuscaClienteClick(Sender: TObject);
    procedure ButtonBuscaProdutoClick(Sender: TObject);
    procedure PanelExcluitItemClick(Sender: TObject);
    procedure PanelBotaoVerificarEstoqueClick(Sender: TObject);
    procedure PanelBotaoCancelarVendaClick(Sender: TObject);
    procedure EditQuantidadeKeyPress(Sender: TObject; var Key: Char);
    procedure FormCreate(Sender: TObject);
    procedure EditDescontoTotalKeyPress(Sender: TObject; var Key: Char);
    procedure EditDescontoTotalExit(Sender: TObject);
    procedure RbPorcentagemClick(Sender: TObject);
    procedure PanelBotaoNovaVendaClick(Sender: TObject);
    procedure PanelBotaoFinalizarVendaClick(Sender: TObject);
    procedure PanelNovaVendaClick(Sender: TObject);
    procedure PanelAtualizarValorTotalClick(Sender: TObject);
    procedure EditValorTotalChange(Sender: TObject);
    procedure PanelNovaVendaMouseEnter(Sender: TObject);
    procedure PanelNovaVendaMouseLeave(Sender: TObject);
    procedure EditCodigoVendaChange(Sender: TObject);
  private
    { Private declarations }
    procedure CalcularTotal;
  public
    { Public declarations }
  end;

var
  FormVendas: TFormVendas;

implementation
uses
    Unit_Princ, UnitFuncoesDiversas,Math;

{$R *.dfm}

procedure TFormVendas.PanelInserirItemVendaClick(Sender: TObject);
var
    AuxCodProduto, QuantidadeItem, CodCliente, QueryOriginal : String;
    ValorProduto, TotalVenda,TotalVendaItem, ValorItem, RateioItemDesc, RateioValorDesconto: Currency;
    ValorItemSubTotal, CampoDescTotal :Currency;
    CodIdVenda,CodProduto,TotalDeItens : integer;
begin
    // Verificações de campos vazios
    if (Trim(EditCodigoVenda.Text) = '') then
        CodIdVenda := 0
    else
        CodIdVenda := StrToInt(Trim(EditCodigoVenda.Text));

    if (Trim(EditCodProduto.Text) = '') then
        CodProduto := 0
    else
        CodProduto := StrToInt(EditCodProduto.Text);


    CodCliente := Trim(EditCodCliente.Text);
    QuantidadeItem := Trim(EditQuantidade.Text) ;
    AuxCodProduto := Trim(EditCodProduto.Text);

    if (CodCliente = '' )  then
    begin
        MessageDlg('Cliente precisa ser preenchido para realizar a venda!', mtError, [mbOK], 0);
        Exit;
    end;
    if (AuxCodProduto = '' ) then
    begin
        MessageDlg('Produto não foi preenchido para realizar a inserção!!', mtError, [mbOK], 0);
        Exit;
    end;


    With FormConexao do
    begin
        if (QuantidadeItem <> '') and (QuantidadeItem <> '0') then
        begin
                FDQueryItensVendaAux.Params[0].AsInteger := CodIdVenda;
                FDQueryItensVendaAux.Open;
                 if FDQueryItensVendaAux.Locate('VENDA_ID;PRODUTO_ID',VarArrayOf([CodIdVenda,CodProduto]),[]) then
                 begin
                    TotalDeItens := 0;
                    while not FDQueryItensVendaAux.Eof do
                    begin

                        TotalDeItens := FDQueryItensVendaAux.FieldByName('QUANTIDADE').AsInteger;
                        FormConexao.FDQueryItensVendaAux.Next;
                    end;
                end;

            FDQueryProdutos.Close;
            QueryOriginal := FDQueryProdutos.SQL.Text;
            FDQueryProdutos.SQL.Text := 'SELECT * FROM PRODUTOS WHERE ID= :IDPROD ';
            FDQueryProdutos.ParamByName('IDPROD').AsInteger := StrToInt(AuxCodProduto);
            FDQueryProdutos.Open;

            ValorProduto := FDQueryProdutos.FieldByName('VALOR_VENDA').AsCurrency;

            if not FDQueryProdutos.IsEmpty then
            begin
                if StrToInt(QuantidadeItem) > FDQueryProdutos.FieldByName('SALDO_ESTOQUE').AsInteger then
                begin
                    MessageDlg('A quantidade informada é maior do que a disponível em estoque!', mtError, [mbOK], 0);
                    FDQueryProdutos.Close;
                    FDQueryProdutos.SQL.Text := QueryOriginal;
                    Exit;
                end;

                if TotalDeItens <> 0 then
                    TotalDeItens := StrToInt(QuantidadeItem) + TotalDeItens;


                if TotalDeItens > FDQueryProdutos.FieldByName('SALDO_ESTOQUE').AsInteger  then
                begin
                    MessageDlg('A quantidade informada é maior do que a disponível em estoque!', mtError, [mbOK], 0);
                    FDQueryProdutos.Close;
                    FDQueryProdutos.SQL.Text := QueryOriginal;
                    Exit;
                end;

            end;
            FDQueryProdutos.Close;
            FDQueryProdutos.SQL.Text := QueryOriginal;
        end
        else
        begin
            MessageDlg('Informe uma quantidade de item para a venda.!', mtError, [mbOK], 0);
            Exit;
        end;
    end;



    //Calculo para venda
    TotalVendaItem := StrToInt(QuantidadeItem) *  ValorProduto;

    //Conectando Dbgrid/Inserindo/Atualizando = FDQueryItensVendaAux
    With FormConexao do
    begin
        FDQueryItensVendaAux.Params[0].AsInteger := CodIdVenda;
        FDQueryItensVendaAux.Open;
        if FDQueryItensVendaAux.Locate('VENDA_ID;PRODUTO_ID',VarArrayOf([CodIdVenda,CodProduto]),[]) then
        begin
            FDQueryItensVendaAux.Edit;
            FDQueryItensVendaAux.FieldByName('QUANTIDADE').Asinteger := FDQueryItensVendaAux.FieldByName('QUANTIDADE').Asinteger + StrToInt(EditQuantidade.Text);
            FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency := FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency + TotalVendaItem;
            FDQueryItensVendaAux.Post;
            FDConnection.Commit;
        end
        else
        begin
            FDQueryItensVendaAux.Insert;
            FDQueryItensVendaAux.FieldByName('VENDA_ID').AsInteger := StrToInt(EditCodigoVenda.text);
            FDQueryItensVendaAux.FieldByName('PRODUTO_ID').AsInteger := StrToInt (EditCodProduto.Text);
            FDQueryItensVendaAux.FieldByName('QUANTIDADE').AsInteger := StrToInt (EditQuantidade.Text);
            FDQueryItensVendaAux.FieldByName('PRECO_UNITARIO').AsCurrency := ValorProduto;
            FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency := TotalVendaItem;
            FDQueryItensVendaAux.Post;
            FDConnection.Commit;

            //Ativando botão de excluir
            PanelExcluitItem.Enabled:= True;
            PanelExcluitItem.Color := ClRed;
            PanelExcluitItem.Font.Color := ClWhite;
            PanelExcluitItem.Font.Style := [fsBold];
        end;
    end;

        

   CampoDescTotal := StrParaFloat(EditDescontoTotal.Text);

    //Obter o total da venda de todos os itens sem o desconto
    With FormConexao do
    begin
        FDQueryItensVendaAux.First ;
        TotalVenda := 0;

        while not FDQueryItensVendaAux.Eof do
        begin

            TotalVenda := TotalVenda + FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;
            FormConexao.FDQueryItensVendaAux.Next;
        end;
    end;

    if RbPorcentagem.Checked then
        CampoDescTotal := (StrParaFloat(EditDescontoTotal.Text) / 100)  *  TotalVenda;


    if  (CampoDescTotal > TotalVenda) then
    begin
        MessageDlg('Erro: O valor do desconto informado é maior do que o valor total da venda!',mtError, [mbOK], 0, mbOK);
        Exit;
    end;



    // Calculo realizado de rateio para proporção em cada item
    With FormConexao do
    begin
        FDQueryItensVendaAux.First;
        while not FDQueryItensVendaAux.Eof do
        begin
            ValorItemSubTotal := FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;
            RateioItemDesc := ValorItemSubTotal / TotalVenda;
            RateioValorDesconto := RateioItemDesc * CampoDescTotal;

            FDQueryItensVendaAux.Edit;
            FDQueryItensVendaAux.FieldByName('DESCONTO').AsCurrency := RoundTo(RateioValorDesconto, -2);
            TotalVenda := TotalVenda - RateioValorDesconto;

            FDQueryItensVendaAux.Post;
            FDQueryItensVendaAux.Next;
        end;
    end;



    //Atualizando total da venda
    EditValorTotal.Text :=  FloatToStrF(TotalVenda, ffNumber, 15, 2);
    FormConexao.FDQueryItensVendaAux.Refresh;
    DBGridItemVenda.Refresh;
end;

procedure TFormVendas.PanelNovaVendaClick(Sender: TObject);
begin
    EditCodigoVenda.Enabled := False;
    EditNomeClienteVenda.Enabled := True;
    EditCodCliente.Enabled := True;
    EditNomeProduto.Enabled := True;
    EditCodProduto.Enabled := True;
    ButtonBuscaCliente.Enabled := True;
    ButtonBuscaProduto.Enabled := True;
    EditQuantidade.Enabled := True;
    PanelInserirItemVenda.Enabled := True;
    PanelExcluitItem.Enabled := True;
    EditDescontoTotal.Enabled := True;
    PanelBotaoFinalizarVenda.Enabled := True;

    //Deixando Campos vazios
    EditCodigoVenda.Text := '';
    EditCodCliente.Text := '';
    EditNomeClienteVenda.Text := '';
    EditCodProduto.Text := '';
    EditNomeProduto.Text := '';
    EditQuantidade.Text := '';
    EditDescontoTotal.Text := '';
    EditValorTotal.Text := '';


    PanelNovaVenda.Visible := False;
    
    
end;

procedure TFormVendas.PanelNovaVendaMouseEnter(Sender: TObject);
begin
    //
    PanelNovaVenda.Color := clYellow;
    PanelNovaVenda.Font.Color := $00191919;
    PanelNovaVenda.Font.Style := [fsBold];
end;

procedure TFormVendas.PanelNovaVendaMouseLeave(Sender: TObject);
begin
    PanelNovaVenda.Color := $00191919;
    PanelNovaVenda.Font.Color := ClWhite;
    PanelNovaVenda.Font.Style := [fsBold];
end;

procedure TFormVendas.RbPorcentagemClick(Sender: TObject);
begin
    //
    EditDescontoTotal.Text := '';

end;

procedure TFormVendas.PanelBotaoVerificarEstoqueClick(Sender: TObject);
var
    QueryOriginal : String;
    TotalDeItens, CodIdVenda, CodProduto : Integer;
begin
    try
        With FormConexao do
        begin
            // Verificações de campos vazios
            if (Trim(EditCodigoVenda.Text) = '') then
                CodIdVenda := 0
            else
                CodIdVenda := StrToInt(Trim(EditCodigoVenda.Text));

            if (Trim(EditCodProduto.Text) = '') then
                CodProduto := 0
            else
                CodProduto := StrToInt(EditCodProduto.Text);

            if (Trim(EditCodProduto.Text) <> '') then
            begin

                FDQueryItensVendaAux.Params[0].AsInteger := CodIdVenda;
                FDQueryItensVendaAux.Open;
                 if FDQueryItensVendaAux.Locate('VENDA_ID;PRODUTO_ID',VarArrayOf([CodIdVenda,CodProduto]),[]) then
                    TotalDeItens := FDQueryItensVendaAux.FieldByName('QUANTIDADE').AsInteger
                 else
                    TotalDeItens := 0;

                FDQueryProdutos.Close;
                QueryOriginal := FDQueryProdutos.SQL.Text;
                FDQueryProdutos.SQL.Text := 'SELECT * FROM PRODUTOS WHERE ID= :IDPROD ';
                FDQueryProdutos.ParamByName('IDPROD').AsInteger := CodProduto;
                FDQueryProdutos.Open;

                if TotalDeItens <> 0 then
                    TotalDeItens :=  FDQueryProdutos.FieldByName('SALDO_ESTOQUE').AsInteger - TotalDeItens
                else
                    TotalDeItens := FDQueryProdutos.FieldByName('SALDO_ESTOQUE').AsInteger;


                if not FDQueryProdutos.IsEmpty then
                    ShowMessage('Produto: ' + FDQueryProdutos.FieldByName('DESCRICAO').AsString + sLineBreak +
                     'SALDO EM ESTOQUE: ' + intToStr(TotalDeItens));

                FDQueryProdutos.SQL.Text:= QueryOriginal;
            end
            else
                ShowMessage('Código do produto não selecionado.!!');
        end;
    Except
        on E: Exception do
        begin
            ShowMessage('Ocorreu um erro: ' + E.Message);
        end;

    end;
end;

procedure TFormVendas.PanelBotaoNovaVendaClick(Sender: TObject);
begin
//   PanelBotaoNovaVenda

    EditCodigoVenda.Enabled := True;
    EditNomeClienteVenda.Enabled := True;
    EditCodCliente.Enabled := True;
    EditNomeProduto.Enabled := True;
    EditCodProduto.Enabled := True;
    ButtonBuscaCliente.Enabled := True;
    ButtonBuscaProduto.Enabled := True;
    EditQuantidade.Enabled := True;
    PanelInserirItemVenda.Enabled := True;
    PanelExcluitItem.Enabled := True;
    EditDescontoTotal.Enabled := True;
    
    PanelNovaVenda.Visible := False;

end;

procedure TFormVendas.PanelBotaoFinalizarVendaClick(Sender: TObject);
var
    DataNascimentoCliente: TDateTime;
    TotalVenda: Currency;
    Desconto: Currency;
    DataAtual: TDateTime;
    CodigoVenda,MsgResult : Integer;
begin
//
    CodigoVenda :=  StrToInt(EditCodigoVenda.Text);
    DataAtual := Now;

    MsgResult := MessageDlg('Deseja finalizar a venda?', mtConfirmation, mbYesNo, 0);


    if MsgResult = MrYes then
    begin
        //Desativando Edits e Botões
        EditCodigoVenda.Enabled := False;
        EditNomeClienteVenda.Enabled := False;
        EditCodCliente.Enabled := False;
        EditNomeProduto.Enabled := False;
        EditCodProduto.Enabled := False;
        ButtonBuscaCliente.Enabled := False;
        ButtonBuscaProduto.Enabled := False;
        EditQuantidade.Enabled := False;
        PanelInserirItemVenda.Enabled := False;
        EditDescontoTotal.Enabled := False;
        PanelBotaoFinalizarVenda.Enabled := False;

        //Deixando visivel Botão da nova venda
        PanelNovaVenda.Visible := True;

        //Desativando Botão Excluir
        PanelExcluitItem.Enabled:= False;
        PanelExcluitItem.Color := clSilver;
        PanelExcluitItem.Font.Color := ClBlack;
        PanelExcluitItem.Font.Style := [fsBold];
        //Desativando Botão Finalizar
        PanelBotaoFinalizarVenda.Color := clSilver;
        PanelBotaoFinalizarVenda.Font.Color:= ClBlack;
        PanelBotaoFinalizarVenda.Enabled := False;
        //Desativando Botão de Cancelar venda
        PanelBotaoCancelarVenda.Enabled := False;
        PanelBotaoCancelarVenda.Color:= ClSilver;
        PanelBotaoCancelarVenda.Font.Color := ClBlack;
        PanelBotaoCancelarVenda.Font.Style := [fsBold];
        //Desativando Botão de Inserir
        PanelInserirItemVenda.Enabled := False;
        PanelInserirItemVenda.Color := ClSilver;
        PanelInserirItemVenda.Font.Color :=  ClBlack;
        PanelInserirItemVenda.Font.Style := [fsBold];
        //Desativando Botão de Atualizar Valor
        PanelAtualizarValorTotal.Enabled := False;
        PanelAtualizarValorTotal.Color:= ClSilver;
        PanelAtualizarValorTotal.Font.Color :=  ClBlack;
        PanelAtualizarValorTotal.Font.Style := [fsBold];
        //Desativando Radio Buttons
        RbValorReal.Enabled := False;
        RbPorcentagem.Enabled := False;



        With FormConexao do
        begin
            if FDQueryVenda.Locate('ID', CodigoVenda) then
            begin
                FDQueryVenda.Edit;
                FDQueryVenda.FieldByName('ID_CLIENTE').Asinteger :=   StrToInt(EditCodCliente.Text);
                FDQueryVenda.FieldByName('VALOR_TOTAL').AsCurrency := StrParaFloat(EditValorTotal.Text);
                FDQueryVenda.FieldByName('DATA_VENDA').AsDateTime := DataAtual;
                FDQueryVenda.FieldByName('DESCONTO_VALOR').AsCurrency :=  StrParaFloat(EditDescontoTotal.Text);
                FDQueryVenda.Post;
                FDConnection.Commit;
            end;
        end;

        //Fechando Query da Grid
        //FormConexao.FDQueryItensVendaAux.Close;

    end;


end;

procedure TFormVendas.PanelAtualizarValorTotalClick(Sender: TObject);
var
    TotalVenda, TotalVendaAux, RateioItemDesc, RateioValorDesconto, ValorItemSubTotal, CampoDescTotal,CampoValorTotal: Currency;
begin

    CampoDescTotal := StrParaFloat(EditDescontoTotal.Text);

    if CampoDescTotal = 0 then
        ShowMessage('Nenhum valor de desconto informado!');

    //Obter o total da venda de todos os itens sem o desconto
    With FormConexao do
    begin
        FDQueryItensVendaAux.First ;
        TotalVenda := 0;

        while not FDQueryItensVendaAux.Eof do
        begin

            TotalVenda := TotalVenda + FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;

            FormConexao.FDQueryItensVendaAux.Next;
        end;
    end;

    if RbPorcentagem.Checked then
        CampoDescTotal := (StrParaFloat(EditDescontoTotal.Text) / 100)  *  TotalVenda;

    TotalVendaAux := TotalVenda;
    if  (CampoDescTotal > TotalVenda) then
    begin
        MessageDlg('Erro: O valor do desconto informado é maior do que o valor total da venda!',mtError, [mbOK], 0, mbOK);
        Exit;
    end;


    // Calculo realizado de rateio para proporção em cada item
    With FormConexao do
    begin
        FDQueryItensVendaAux.First;
        while not FDQueryItensVendaAux.Eof do
        begin
            ValorItemSubTotal := FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;
            RateioItemDesc := ValorItemSubTotal / TotalVendaAux;
            RateioValorDesconto := RateioItemDesc * CampoDescTotal;

            FDQueryItensVendaAux.Edit;
            FDQueryItensVendaAux.FieldByName('DESCONTO').AsCurrency := RoundTo(RateioValorDesconto, -2);
            TotalVenda := TotalVenda - RateioValorDesconto;

            FDQueryItensVendaAux.Post;
            FDQueryItensVendaAux.Next;
        end;
    end;

    //Atualizando total da venda
    EditValorTotal.Text :=  FloatToStrF(TotalVenda, ffNumber, 15, 2);


    FormConexao.FDQueryItensVendaAux.Refresh;
    DBGridItemVenda.Refresh;
end;

procedure TFormVendas.PanelBotaoCancelarVendaClick(Sender: TObject);
var
    CodigoVenda: Integer;
begin
    //CancelarVenda
    if EditCodigoVenda.Text <> '' then
    begin
        CodigoVenda:= StrToInt(EditCodigoVenda.Text);
        EditNomeClienteVenda.Enabled := True;
        EditNomeProduto.Enabled := True;
        ButtonBuscaCliente.Enabled:= True;
    
        //setar vazio
        EditCodCliente.Text := '';
        EditCodProduto.Text := '';
        EditNomeProduto.Text := '';
        EditNomeClienteVenda.Text := '';
        EditQuantidade.Text := '';
        EditValorTotal.Text := '';
        EditDescontoTotal.Text := '';


        //Deletando Itens :)
        With FormConexao do
        begin
            FDQueryItensVendaAux.Params[0].AsInteger := CodigoVenda;
            FDQueryItensVendaAux.Open;
            while not FDQueryItensVendaAux.Eof do
            begin
                if FDQueryItensVendaAux.Locate('VENDA_ID', CodigoVenda, []) then
                    FDQueryItensVendaAux.Delete
                else
                    FDQueryItensVendaAux.Next;
            end;
            EditCodigoVenda.Text := '';
            FDQueryItensVendaAux.Close;
        end;

        //Deletando Venda(s) :)
        With FormConexao do
        begin
            FDQueryVenda.Close;
            FDQueryVenda.Open;
            while not FDQueryVenda.Eof do
            begin
                if FDQueryVenda.Locate('ID', CodigoVenda, []) then
                    FDQueryVenda.Delete
                else
                    FDQueryVenda.Next;
            end;
            EditCodigoVenda.Text := '';
            FDQueryVenda.Close;
        end;

    end;

end;

procedure TFormVendas.PanelBotaoFecharClick(Sender: TObject);
begin
    if FormConexao.FDQueryItensVendaAux.Active then
        FormConexao.FDQueryItensVendaAux.Close;

    Self.Close;
end;



procedure TFormVendas.FormClose(Sender: TObject; var Action: TCloseAction);
begin
    HomeScreen.PanelMenu.Enabled            := True;
    HomeScreen.PanelConfigServidor.Enabled  := True;
    HomeScreen.PanelOneTop.Enabled          := True;
    FreeAndNil(FormVendas);
end;

procedure TFormVendas.FormCreate(Sender: TObject);
begin
    RbValorReal.Checked := True;
    EditDescontoTotal.Text := '10,00'; //APAGAR TESTES
    EditQuantidade.Text := '2';   //APAGAR TESTES
end;

procedure TFormVendas.PanelBotaoFecharMouseEnter(Sender: TObject);
begin
  PanelBotaoFechar.Color := ClRed;
  PanelBotaoFechar.Font.Color := ClWhite;
  PanelBotaoFechar.Font.Style := [fsBold];
end;

procedure TFormVendas.PanelBotaoFecharMouseLeave(Sender: TObject);
begin
  PanelBotaoFechar.Color := $00191919;
  PanelBotaoFechar.Font.Color := ClWhite;
  PanelBotaoFechar.Font.Style := [];
end;



procedure TFormVendas.PanelExcluitItemClick(Sender: TObject);
var
    TotalVenda, ValorItemSubTotal, RateioValorDesconto, RateioItemDesc, CampoDescTotal: Currency;
    ItemExiste: Boolean;
begin
    FormConexao.FDQueryItensVendaAux.Delete;
    FormConexao.FDConnection.Commit;
    FormConexao.FDQueryItensVendaAux.Refresh;
    CampoDescTotal := StrParaFloat(EditDescontoTotal.Text);


    //Obter o total da venda de todos os itens sem o desconto
    With FormConexao do
    begin
        FDQueryItensVendaAux.First ;
        TotalVenda := 0;
        ItemExiste := False;
        while not FDQueryItensVendaAux.Eof do
        begin
            ItemExiste:= True;
            TotalVenda := TotalVenda + FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;
            FormConexao.FDQueryItensVendaAux.Next;
        end;
    end;


    if RbPorcentagem.Checked then
        CampoDescTotal := (StrParaFloat(EditDescontoTotal.Text) / 100)  *  TotalVenda;

    if  (CampoDescTotal > TotalVenda) then
    begin
        CampoDescTotal := 0;
        EditDescontoTotal.Text := '0';
    end;


    // Calculo realizado de rateio para proporção em cada item
    With FormConexao do
    begin
        FDQueryItensVendaAux.First;
        while not FDQueryItensVendaAux.Eof do
        begin
            ValorItemSubTotal := FDQueryItensVendaAux.FieldByName('SUBTOTAL').AsCurrency;
            RateioItemDesc := ValorItemSubTotal / TotalVenda;
            RateioValorDesconto := RateioItemDesc * CampoDescTotal;

            FDQueryItensVendaAux.Edit;
            FDQueryItensVendaAux.FieldByName('DESCONTO').AsCurrency := RoundTo(RateioValorDesconto, -2);
            TotalVenda := TotalVenda - RateioValorDesconto;

            FDQueryItensVendaAux.Post;
            FDQueryItensVendaAux.Next;
        end;
    end;

    //Desativando Botão Excluir
    if not ItemExiste then
    begin
        PanelExcluitItem.Enabled:= False;
        PanelExcluitItem.Color := clSilver;
        PanelExcluitItem.Font.Color := ClBlack;
        PanelExcluitItem.Font.Style := [fsBold];
    end;


    //Atualizando total da venda
    EditValorTotal.Text :=  FloatToStrF(TotalVenda, ffNumber, 15, 2);

    FormConexao.FDQueryItensVendaAux.Refresh;
end;

procedure TFormVendas.ButtonBuscaProdutoClick(Sender: TObject);
var
  DescricaoBusca: string;
  ProdutoID: Integer;
begin
    DescricaoBusca := Trim(EditNomeProduto.Text);

    if DescricaoBusca <> '' then
    begin
        FormConexao.FDQueryProdutos.Close;
        FormConexao.FDQueryProdutos.Open;
        FormConexao.FDQueryProdutos.First;
        while not FormConexao.FDQueryProdutos.Eof do
        begin
            if AnsiStartsText(DescricaoBusca, FormConexao.FDQueryProdutos.FieldByName('DESCRICAO').AsString) then
            begin
                  ProdutoID := FormConexao.FDQueryProdutos.FieldByName('ID').AsInteger;
                  EditNomeProduto.Text := FormConexao.FDQueryProdutos.FieldByName('DESCRICAO').AsString;
                  EditCodProduto.Text := IntToStr(ProdutoID);
                  FormConexao.FDQueryProdutos.Close;
                  Exit;
            end;
            FormConexao.FDQueryProdutos.Next;
        end;
        ShowMessage('Nenhum produto correspondente encontrado.');
    end;
  FormConexao.FDQueryProdutos.Close;
end;


procedure TFormVendas.ButtonBuscaClienteClick(Sender: TObject);
var
    ClienteBusca: string;
    ClienteID, RespMsg: Integer;
    InserirVenda : Boolean;
begin
    ClienteBusca := EditNomeClienteVenda.Text;
    InserirVenda := False;
    FormConexao.FDQueryClientes.Open;
    while not FormConexao.FDQueryClientes.Eof do
    begin
        if AnsiStartsText(ClienteBusca, FormConexao.FDQueryClientes.FieldByName('NOME_CLIENTE').AsString) then
        begin
            ClienteID := FormConexao.FDQueryClientes.FieldByName('ID').AsInteger;
            EditNomeClienteVenda.Text := FormConexao.FDQueryClientes.FieldByName('NOME_CLIENTE').AsString;
            EditCodCliente.Text:= IntToStr (ClienteID);
            FormConexao.FDQueryClientes.Close;

            if Trim(EditCodCliente.Text) <> '' then
            begin
                RespMsg := MessageDlg('Confirma o cliente selecionado?', mtConfirmation, [mbYes, mbNo], 0);
                if RespMsg = mrYes then
                begin
                    EditNomeClienteVenda.Enabled := False;
                    ButtonBuscaCliente.Enabled := False;
                    InserirVenda := True;

                    FormConexao.FDQueryClientes.Close;


                    FormConexao.FDQueryVenda.Open;
                    FormConexao.FDQueryVenda.Insert;
                    FormConexao.FDQueryVenda.FieldByName('ID_CLIENTE').AsInteger := ClienteID;
                    FormConexao.FDQueryVenda.Post;
                    FormConexao.FDConnection.Commit;
                    EditCodigoVenda.Text :=  FormConexao.FDQueryVenda.FieldByName('ID').AsString;



                end
                else
                begin
                    EditNomeClienteVenda.Enabled := True;
                    EditCodCliente.Text := '';
                end;

            end;

            Exit;
        end;
        FormConexao.FDQueryClientes.Next;
    end;
    if (Trim(EditCodCliente.Text) = '') then
    begin
        ShowMessage('Nenhum cliente correspondente encontrado.');
        FormConexao.FDQueryClientes.Close;
    end;




  



end;

procedure TFormVendas.CalcularTotal;
begin
  // Lógica para calcular o total da venda
end;



procedure TFormVendas.EditQuantidadeKeyPress(Sender: TObject; var Key: Char);
begin
    PermitirApenasNumeros(Key);
end;

procedure TFormVendas.EditValorTotalChange(Sender: TObject);
begin
    //
    if (Trim(EditValorTotal.Text) <> '') and (Trim(EditValorTotal.Text) <> '0,00') then
    begin
        PanelBotaoFinalizarVenda.Color := ClLime;
        PanelBotaoFinalizarVenda.Font.Color := ClWhite;
        PanelBotaoFinalizarVenda.Enabled := True;
    end
    else
    begin
        PanelBotaoFinalizarVenda.Color := clSilver;
        PanelBotaoFinalizarVenda.Font.Color := ClBlack;
        PanelBotaoFinalizarVenda.Enabled := False;
    end;
end;

procedure TFormVendas.EditCodigoVendaChange(Sender: TObject);
begin
    if (Trim(EditCodigoVenda.Text) <> '') then
    begin
        PanelBotaoCancelarVenda.Color := clRed;
        PanelBotaoCancelarVenda.Font.Color := ClWhite;
        PanelBotaoCancelarVenda.Font.Style := [fsBold];
        PanelBotaoCancelarVenda.Enabled := True;

    end
    else
    begin
        PanelBotaoCancelarVenda.Color := clSilver;
        PanelBotaoCancelarVenda.Font.Color := ClBlack;
        PanelBotaoCancelarVenda.Font.Style := [fsBold];
        PanelBotaoCancelarVenda.Enabled := False;
    end;
end;

procedure TFormVendas.EditDescontoTotalExit(Sender: TObject);
var
    Valor: Double;
begin
    if (Trim(EditDescontoTotal.Text) <> '') and RbValorReal.Checked then
    begin
        Valor := StrParaFloat(EditDescontoTotal.Text);
        EditDescontoTotal.Text := FormatFloat('#,##0.00', Valor);
    end
    else
        Valor := 0.00;
end;

procedure TFormVendas.EditDescontoTotalKeyPress(Sender: TObject; var Key: Char);
var
    Valor: Double;
begin

    if EditValorTotal.Text <> '' then
    begin
        PanelAtualizarValorTotal.Enabled :=  True;
        PanelAtualizarValorTotal.Color := $00004DFF;
    end
    else
    begin
        PanelAtualizarValorTotal.Enabled :=  False;
        PanelAtualizarValorTotal.Color := clSilver;
    end;



    if RbPorcentagem.Checked then
        PermitirApenasNumeros(Key);

    if RbValorReal.Checked then
        PermitirApenasNumeros2(Key);



    if (Key = #13) and RbPorcentagem.Checked then
    begin
        if Trim(EditDescontoTotal.Text) <> '' then
            Valor := StrParaFloat(EditDescontoTotal.Text)
        else
            Valor := 0.00;

        EditDescontoTotal.Text := FloatToStrF(Valor, ffNumber, 15, 2);
        EditDescontoTotal.SelStart := Length(EditDescontoTotal.Text); //Indicador de texto a direita
    end;


    if (Key = #13) and RbValorReal.Checked then
    begin
        if Trim(EditDescontoTotal.Text) <> '' then
            Valor := StrParaFloat(EditDescontoTotal.Text)
        else
            Valor := 0.00;
        EditDescontoTotal.Text := FloatToStrF(Valor, ffNumber, 15, 2);
        EditDescontoTotal.SelStart := Length(EditDescontoTotal.Text); //Indicador de texto a direita
    end;

end;

end.

